#!/usr/bin/python

import argparse, sys
import re

###Function for creating ranscripts_Gene dictionary###
# Takes tab-seperated canonical transcripts file as INPUT
# Creates a dictionary using 2 columns: ENST and Gene
# Key -> ENST; Value - Gene
# Returns the dictionary
def Transcripts_Gene(args):

    Transcripts_Gene_dict = {} # Initializing an empty dictionary

    CanonicalTranscripts_File = open(args.inTranscripts)

    CanonicalTranscripts_File.readline() # Skip header

    # Parsing the Uniprot Primary Accession file
    for line in CanonicalTranscripts_File:
        line = line.rstrip('\n')
        CanonicalTranscripts_fields = line.split('\t')

        # Key -> ENST
        # Value -> Gene
        (ENST_key, Gene) = (CanonicalTranscripts_fields[0], CanonicalTranscripts_fields[1])
        Transcripts_Gene_dict[ENST_key] = Gene

    return Transcripts_Gene_dict

###Function for mapping Uniprot Primary Accession to canonical transcripts###
# Takes Uniprot Primary Accession file produced by uniprot_parser as INPUT
# Creates a dictionary using 2 columns: Uniprot Primary accession and ENST(s)
# Key -> Uniprot Primary accession; Value - ENST(s)
# Checks if the ENST is present in the canonical transcripts file
# If yes, checks whether this ENST is associated with single Uniprot Primary accession
# If yes, Store/remember the Accession and ENST, else - don't remember and keep a count
# Print to STDOUT in .tsv format
# OUTPUT consists of Uniprot Primary Accession and the corresponding stored ENST
def Uniprot2ENST(args):

    # Calling the dictionary containing transcripts and genes
    Transcripts_Gene_dict = Transcripts_Gene(args)

    UniprotPrimAC_file = open(args.inPrimAC)

    UniprotPrimAC_file.readline() # Skip header

    Uniprot_ENST_dict = {} # Initializing an empty dictionary

    # Compiling regular expressions###

    # Eliminating Mouse transcripts
    re_ENSMUST = re.compile('^ENSMUST')

    # Parsing the Uniprot Primary Accession file
    for line in UniprotPrimAC_file:
        line = line.rstrip('\n')
        UniprotPrimAC_fields = line.split('\t')

        # ENST column - UniprotPrimAC_fields[2]
        # This is a single string containing comma-seperated ENSTs
        # So we split it into a list that can be accessed later
        canonical_ENSTs = UniprotPrimAC_fields[2].split(',')

        # Initializing an empty ENST list
        ENST_list = []

        # Eliminating Mouse transcripts
        for ENST in canonical_ENSTs:
            if not re_ENSMUST.match(ENST):
                ENST_list.append(ENST)

                # Key -> Uniprot Primary accession
                # Value -> ENST(s)
                (UniprotPrimAC_key, ENSTs) = (UniprotPrimAC_fields[0], ENST_list)

                # After eliminating mouse transcripts, some values can be empty
                # And this stores keys without values in the Uniprot_ENST_dict
                # We avoid this using the below if condition
                if ENSTs != ['']:
                    Uniprot_ENST_dict[UniprotPrimAC_key] = ENSTs

    print(Uniprot_ENST_dict)
    return


####Taking and handling command-line arguments
def main():
    file_parser = argparse.ArgumentParser(description =
    """
---------------------------------------------------------------------------------------------------------------------------------
Program: Parses the Uniprot Primary Accession file produced by uniprot_parser, maps to canonical transcripts and prints to STDOUT
---------------------------------------------------------------------------------------------------------------------------------
The output consists of 2 columns in .tsv format:
 -> Uniprot Primary Accession
 -> Corresponding ENST
---------------------------------------------------------------------------------------------------------------------------------
    """,
    formatter_class = argparse.RawDescriptionHelpFormatter)

    required = file_parser.add_argument_group('Required arguments')
    optional = file_parser.add_argument_group('Optional arguments')

    required.add_argument('--inPrimAC', metavar = "Input File", dest = "inPrimAC", help = 'Uniprot Primary Accession File generated by the uniprot parser', required = True)
    required.add_argument('--inTranscripts', metavar = "Input File", dest = "inTranscripts", help = 'Canonical Transcripts file', required = True)

    file_parser.set_defaults(func=Uniprot2ENST)
    args = file_parser.parse_args()
    args.func(args)

if __name__ == "__main__":
    main()
