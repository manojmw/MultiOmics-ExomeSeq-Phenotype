#!/usr/bin/python

import sys, argparse
import logging

###########################################################

# Parses on STDIN a tsv file as produced 
# by BuildInteractome.py
# Adds a 3rd column: Edge weight 
# Edge weight value = 1
#
# Prints to STDOUT in .tsv format
# Output consists of 3 columns:
# - ENSG of Protein A
# - ENSG of Protein B
# - Edge weight = 1
def ModuleInputFile(highqualityPPI):

    highqualityPPI = sys.stdin

    logging.info("Processing data from Input file")

    highqualityPPI.readline() # Skip header

    logging.info("Preparing Output...")

    # Parsing the file
    for line in highqualityPPI:
        line = line.rstrip('\n') # remove carriage returns
        Interactome_fields = line.split('\t')

        print(Interactome_fields[0], "\t", Interactome_fields[1], "\t", 1)

    logging.info("Done ðŸŽ‰")

    return

###########################################################

# Taking and handling command-line arguments
def main():
    file_parser = argparse.ArgumentParser(description =
    """
-----------------------------------------------------------------------------------------------------------
Program: Parses the output file produced by Interactome.py, processes it  and prints to STDOUT
-----------------------------------------------------------------------------------------------------------
Usage:

    % python 5_ModuleInputFile.py < Input file
                        OR
    % cat Input file | python 5_ModuleInputFile.py

The output consists of three columns in .tsv format:
  -> ENSG of Protein A
  -> ENSG of Protein B
  -> Edge weight = 1

The OUTPUT FILE generated by this script can be used as INPUT for most of the MODULE IDENTIFICATION METHODS
-----------------------------------------------------------------------------------------------------------
    """,
    formatter_class = argparse.RawDescriptionHelpFormatter)

    file_parser.set_defaults(func=ModuleInputFile)
    args = file_parser.parse_args()
    args.func(args)

if __name__ == "__main__":
    # Logging to Standard Error
    Log_Format = "%(levelname)s - %(asctime)s - %(message)s \n"
    logging.basicConfig(stream = sys.stderr, format  = Log_Format, level = logging.DEBUG)
    main()
